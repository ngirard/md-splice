name: Python Wheels

on:
  push:
    branches:
      - work
    paths:
      - 'md-splice-py/**'
      - 'md-splice-lib/**'
      - '.github/workflows/python-wheels.yml'
      - 'Cargo.lock'
      - 'Cargo.toml'
  pull_request:
    paths:
      - 'md-splice-py/**'
      - 'md-splice-lib/**'
      - '.github/workflows/python-wheels.yml'
      - 'Cargo.lock'
      - 'Cargo.toml'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  linux-manylinux:
    name: manylinux (${{ matrix.target }})
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64
            manylinux: manylinux_2_28
            upload-name: wheels-manylinux-x86_64
            run-tests: true
          - target: aarch64
            manylinux: manylinux_2_28
            upload-name: wheels-manylinux-aarch64
            run-tests: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Enable QEMU for cross targets
        if: matrix.target != 'x86_64'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: md-splice-py
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          manylinux: ${{ matrix.manylinux }}
          sccache: ${{ github.event_name != 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/') }}
      - name: Test manylinux wheel
        if: matrix.run-tests
        shell: bash
        working-directory: md-splice-py
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install pytest hypothesis
          python -m pip install dist/md_splice-*.whl
          tmp_dir="$(mktemp -d)"
          cp -r tests "${tmp_dir}/tests"
          cd "${tmp_dir}"
          pytest
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.upload-name }}
          path: md-splice-py/dist/*

  linux-musllinux:
    name: musllinux (x86_64)
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Build musllinux wheels
        uses: PyO3/maturin-action@v1
        with:
          working-directory: md-splice-py
          target: x86_64
          args: --release --out dist --find-interpreter
          manylinux: musllinux_1_2
          sccache: ${{ github.event_name != 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/') }}
      - name: Upload musllinux wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-x86_64
          path: md-splice-py/dist/*

  macos-wheels:
    name: macOS ${{ matrix.platform.target }} (py${{ matrix.python-version }})
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build macOS wheel
        uses: PyO3/maturin-action@v1
        with:
          working-directory: md-splice-py
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: ${{ github.event_name != 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/') }}
      - name: Test macOS wheel
        shell: bash
        working-directory: md-splice-py
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install pytest hypothesis
          python -m pip install dist/md_splice-*$(python3 -c "import platform; print(f'cp{platform.python_version_tuple()[0]}{platform.python_version_tuple()[1]}')")*.whl
          tmp_dir="$(mktemp -d)"
          cp -r tests "${tmp_dir}/tests"
          cd "${tmp_dir}"
          pytest
      - name: Upload macOS wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}-py${{ matrix.python-version }}
          path: md-splice-py/dist/*

  windows-wheels:
    name: Windows x86_64 (py${{ matrix.python-version }})
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build Windows wheel
        uses: PyO3/maturin-action@v1
        with:
          working-directory: md-splice-py
          target: x64
          args: --release --out dist --find-interpreter
          sccache: ${{ github.event_name != 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/') }}
      - name: List dist directory
        shell: pwsh
        working-directory: md-splice-py
        run: |
          Get-ChildItem dist
      - name: Test Windows wheel
        shell: pwsh
        working-directory: md-splice-py
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          python -m pip install --upgrade pip
          python -m pip install pytest hypothesis

          # Compute CP tag for current interpreter, e.g. "cp311"
          $pyTag = python -c "import sys; print(f'cp{sys.version_info[0]}{sys.version_info[1]}')" | ForEach-Object { $_.Trim() }

          # architecture used for our wheels on Windows runners
          $arch = "win_amd64"

          # Prefer wheel matching the interpreter tag and arch
          $wheel = Get-ChildItem dist -Filter "md_splice-*${pyTag}*${arch}*.whl" | Select-Object -First 1

          # If no exact match, try any wheel that contains the cp tag
          if (-not $wheel) {
            $wheel = Get-ChildItem dist -Filter "md_splice-*${pyTag}*.whl" | Select-Object -First 1
          }

          # Final fallback: any md_splice wheel (keeps previous behavior if nothing better)
          if (-not $wheel) {
            Write-Host "No wheel found matching $pyTag and $arch; falling back to any md_splice-*.whl"
            $wheel = Get-ChildItem dist/md_splice-*.whl | Select-Object -First 1
          }

          if (-not $wheel) {
            Write-Error "No wheel found in dist/"
            exit 1
          }

          Write-Host "Installing wheel: $($wheel.Name)"
          python -m pip install $wheel.FullName

          $tmp = New-Item -ItemType Directory -Path (Join-Path $env:RUNNER_TEMP "tests")
          Copy-Item tests $tmp -Recurse
          Set-Location $tmp
          pytest
      - name: Upload Windows wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-x86_64-py${{ matrix.python-version }}
          path: md-splice-py/dist/*

  sdist:
    name: Source distribution
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          working-directory: md-splice-py
          command: sdist
          args: --out dist
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: md-splice-py/dist/*
